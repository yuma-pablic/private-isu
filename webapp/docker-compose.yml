version: '3'
name: private-isu

services:
  nginx:
    image: nginx:1.26
    container_name: nginx
    depends_on:
      - app
    volumes:
      - ./etc/nginx/conf.d:/etc/nginx/conf.d
      - ./public:/public
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
    networks:
      - my_network

  promtail:
    container_name: promtail
    image: grafana/promtail:2.9.6
    command: "-config.file=/etc/promtail/promtail.yaml"
    volumes:
      - ../promtail:/etc/promtail/
      - ./logs/nginx:/var/log/nginx
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - my_network

  app:
    build:
      # Go実装の場合は golang/ PHP実装の場合は php/
      context: golang/
      dockerfile: Dockerfile
      args:
        BUILDPLATFORM: linux/amd64
    depends_on:
      - mysql
      - memcached
    environment:
      DOCKER_BUILDKIT: 1
      ISUCONP_DB_HOST: mysql
      ISUCONP_DB_PORT: 3306
      ISUCONP_DB_USER: root
      ISUCONP_DB_PASSWORD: root
      ISUCONP_DB_NAME: isuconp
      ISUCONP_MEMCACHED_ADDRESS: memcached:11211
    networks:
      - my_network
    volumes:
      - ./public:/home/public
    init: true
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1g

  mysql:
    image: mysql:8.4
    container_name: mysql
    environment:
      #- "TZ=Asia/Tokyo"
      - "MYSQL_ROOT_HOST=%"
      - "MYSQL_ROOT_PASSWORD=root"
    volumes:
      - mysql:/var/lib/mysql
      - ./sql:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$MYSQL_ROOT_PASSWORD"]
      interval: 1s
      timeout: 1s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1g

  memcached:
    image: memcached:1.6
    networks:
      - my_network

  nginx-exporter:
    build: ./nginx-exporter
    container_name: nginx-exporter
    ports:
      - "9113:9113"
    restart: unless-stopped
    entrypoint: nginx-prometheus-exporter -nginx.scrape-uri=http://nginx/nginx_status
    networks:
      - my_network
    depends_on:
      - nginx

  mysqld-exporter:
    image: prom/mysqld-exporter
    container_name: mysqld-exporter
    volumes:
      - ./.my.cnf:/etc/.my.cnf
    command:
      - '--config.my-cnf=/etc/.my.cnf'
    environment:
      DATA_SOURCE_NAME: "root:root@tcp(mysql:3306)/performance_schema"
    networks:
      - my_network
    depends_on:
      - mysql
    ports:
      - "9104:9104"

  prometheus:
   image: prom/prometheus
   container_name: prometheus
   networks:
      - my_network
   ports:
     - '9090:9090'
   volumes:
     - '../prometheus/prometheus.yml:/etc/prometheus/prometheus.yml'
     - 'prometheus-data:/prometheus'
   command:
     - '--config.file=/etc/prometheus/prometheus.yml'

  node-exporter:
    image: prom/node-exporter:v1.3.1
    hostname: prometheus-book
    ports:
      - '9100:9100'
    networks:
      - my_network

  pyroscope:
    image: grafana/pyroscope:latest
    container_name: pyroscope
    ports:
      - "4040:4040"
    networks:
      - my_network

  loki:
    container_name: loki
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/loki.yaml"
    environment:
      LOG_CLUSTER_DEPTH: '8'
      LOG_SIM_TH: '0.3'
    volumes:
      - ../loki/loki.yaml:/etc/loki/loki.yaml
    networks:
      - my_network
    ports:
      - 3100:3100

  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_DATABASE_TYPE: mysql
      GF_DATABASE_HOST: mysql:3306
      GF_DATABASE_NAME: isuconp
      GF_DATABASE_USER: root
      GF_DATABASE_PASSWORD: root
      GF_DATABASE_SSL_MODE: disable
      GF_INSTALL_PLUGINS: grafana-pyroscope-app,https://storage.googleapis.com/integration-artifacts/grafana-lokiexplore-app/grafana-lokiexplore-app-latest.zip;grafana-lokiexplore-app
    restart: unless-stopped
    volumes:
      - '../grafana/dashboards:/var/lib/grafana/dashboards'
      - '../grafana/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml'
      - '../grafana/datasources:/etc/grafana/provisioning/datasources'
      - 'grafana_storage:/var/lib/grafana'
    networks:
      - my_network
    depends_on:
     mysql:
      condition: service_healthy

volumes:
  mysql:
  grafana_storage: {}
  prometheus-data: {}

networks:
  my_network: